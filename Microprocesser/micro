#include "stm32l1xx.h"
#include "stm32l1xx_ll_system.h"
#include "stm32l1xx_ll_bus.h"
#include "stm32l1xx_ll_utils.h"
#include "stm32l1xx_ll_rcc.h"
#include "stm32l1xx_ll_pwr.h"
#include "stm32l1xx_ll_gpio.h"
#include "stm32l1xx_ll_usart.h"
#include "stm32l152_glass_lcd.h"
#include "stm32l1xx_ll_lcd.h"
#include "stdio.h"
#include "string.h"

void SystemClock_Config(void);
void GPIO_USART_Configure(void);
void USART_Configure(void);
void buzzer_conf (void);
void led_conf(void);
void switch_conf(void);
void set_password(void);
void insert_password(void);
char check_password(char x[]);
char check_user(char u[]);

char recv_buffer[6] ;
char recv_password[6];
uint8_t idx = 0;
uint8_t id = 0;
char password[6] ;

int main ()
{

	SystemClock_Config();
	LCD_GLASS_Init();
	USART_Configure();
	switch_conf();
	led_conf();
		
	set_password();
	while((GPIOA->IDR & 1) != 1);
	strcpy(password,recv_buffer);
	LCD_GLASS_DisplayString((uint8_t*)"SAVE");
	LL_mDelay(2000);	
	
	insert_password();
	
	LL_mDelay(1500);
	LCD_GLASS_Clear();
	LCD_GLASS_DisplayString((uint8_t*)"MAX");
	while(1);
}

void GPIO_USART_Configure(void) //PB6-RX,PB7-TX
{
	LL_GPIO_InitTypeDef gpio_conf;
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	
	gpio_conf.Pin = LL_GPIO_PIN_7;
	gpio_conf.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	gpio_conf.Pull = LL_GPIO_PULL_UP;
	gpio_conf.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	gpio_conf.Mode = LL_GPIO_MODE_ALTERNATE;
	gpio_conf.Alternate = LL_GPIO_AF_7;
	LL_GPIO_Init(GPIOB,&gpio_conf);
	
	gpio_conf.Pin = LL_GPIO_PIN_6;
	LL_GPIO_Init(GPIOB,&gpio_conf);
}
void USART_Configure(void)
{
	LL_USART_InitTypeDef usart_conf;
	GPIO_USART_Configure();
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
	
	usart_conf.BaudRate = 9600;
	usart_conf.DataWidth = LL_USART_DATAWIDTH_8B;
	usart_conf.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
	usart_conf.Parity = LL_USART_PARITY_NONE;
	usart_conf.StopBits = LL_USART_STOPBITS_1;
	usart_conf.OverSampling = LL_USART_OVERSAMPLING_16;
	usart_conf.TransferDirection = LL_USART_DIRECTION_RX;
	
	LL_USART_Init(USART1,&usart_conf);
	LL_USART_Enable(USART1);
}
void buzzer_conf (void) //PA4
{
	RCC->AHBENR |= (1<<0);
	RCC->APB1ENR |= (1<<29);
	
	GPIOA->MODER |= (3<<8);
	DAC->CR |= (1<<0);
	
}
void led_conf(void)//PA10
{
	LL_GPIO_InitTypeDef led_conf;
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
	led_conf.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	led_conf.Pull = LL_GPIO_PULL_NO;
	led_conf.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	
	led_conf.Pin = LL_GPIO_PIN_10;
	led_conf.Mode = LL_GPIO_MODE_OUTPUT;
	LL_GPIO_Init(GPIOA,&led_conf);
}

char check_password(char x[])
{
	
	if(strlen(x) - 2 < 4)
	{
		LCD_GLASS_Clear();
		LCD_GLASS_DisplayString((uint8_t*)"NOTOK");
		LL_mDelay(1000);
		memset(recv_buffer,0,sizeof(recv_buffer));
		return 1;	
	}
	else
	{
		LCD_GLASS_Clear();
		LCD_GLASS_DisplayString((uint8_t*)"OK");
		LL_mDelay(1000);
		return 0;
	}
}

char check_user(char u[])
{
	if(strcmp(u,password) == 0)
	{
		LCD_GLASS_Clear();
		LCD_GLASS_DisplayString((uint8_t*)"YES");
		GPIOA->ODR |= (1<<10);
		LL_mDelay(5000);
		GPIOA->ODR &= ~(1<<10);
		return 0;
	}
	else
	{
		LCD_GLASS_Clear();
		LCD_GLASS_DisplayString((uint8_t*)"NO");
		buzzer_conf();
		DAC->DHR12R1 = 0xFFFF;
		LL_mDelay(3000);
		DAC->DHR12R1 = 0x0000;
		memset(recv_password,0,sizeof(recv_password));
		return 1;
	}
}	
	
void switch_conf(void)//PA0(USER BUTTON)
{
	
	RCC->AHBENR |= (1<<0);
	GPIOA->MODER &= ~(3<<0);
	
}
void set_password(void)
{
	do{
				idx = 0;
				LCD_GLASS_Clear();
				LCD_GLASS_DisplayString((uint8_t*)"SETPWD");
				do
				{
				while(LL_USART_IsActiveFlag_RXNE(USART1) == RESET);
				recv_buffer[idx++] = LL_USART_ReceiveData8(USART1);
				idx = idx%6;	
				}
				while(strstr((const char*)recv_buffer, "\r\n") == NULL);
			}
		while(check_password(recv_buffer));
}
void insert_password(void)
{
	do{
			id = 0;
			LCD_GLASS_Clear();
			LCD_GLASS_DisplayString((uint8_t*)"ENTER");
			do
			{
			while(LL_USART_IsActiveFlag_RXNE(USART1) == RESET);
			recv_password[id++] = LL_USART_ReceiveData8(USART1);
			id = id%6;		
			}
			while(strstr((const char*)recv_password, "\r\n") == NULL);
		}
		while(check_user(recv_password));
}

/* ==============   BOARD SPECIFIC CONFIGURATION CODE BEGIN    ============== */
/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow :
  *            System Clock source            = PLL (HSI)
  *            SYSCLK(Hz)                     = 32000000
  *            HCLK(Hz)                       = 32000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 1
  *            APB2 Prescaler                 = 1
  *            HSI Frequency(Hz)              = 16000000
  *            PLLMUL                         = 6
  *            PLLDIV                         = 3
  *            Flash Latency(WS)              = 1
  * @retval None
  */
void SystemClock_Config(void)
{
  /* Enable ACC64 access and set FLASH latency */ 
  LL_FLASH_Enable64bitAccess();; 
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  /* Set Voltage scale1 as MCU will run at 32MHz */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (LL_PWR_IsActiveFlag_VOSF() != 0)
  {
  };
  
  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
  {
    /* HSI configuration and activation */
    LL_RCC_HSI_Enable();
    while(LL_RCC_HSI_IsReady() != 1)
    {
    };
  }
  
	
  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3);

  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  };
  
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  };
  
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Set systick to 1ms in using frequency set to 32MHz                             */
  /* This frequency can be calculated through LL RCC macro                          */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ (HSI_VALUE, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3); */
  LL_Init1msTick(32000000);
  
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(32000000);
}





